/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_CARD_GROUP : DATATYPE_BASE
	{
		private DATATYPE_CARD_GROUP_ChildArray itemType = new DATATYPE_CARD_GROUP_ChildArray();

		public class DATATYPE_CARD_GROUP_ChildArray : DATATYPE_BASE
		{
			private DATATYPE__CARD_GROUP_ArrayType_ChildArray itemType = new DATATYPE__CARD_GROUP_ArrayType_ChildArray();

			public class DATATYPE__CARD_GROUP_ArrayType_ChildArray : DATATYPE_BASE
			{
				public List<UInt64> createFromStreamEx(MemoryStream stream)
				{
					UInt32 size = stream.readUint32();
					List<UInt64> datas = new List<UInt64>();

					while(size > 0)
					{
						--size;
						datas.Add(stream.readUint64());
					};

					return datas;
				}

				public void addToStreamEx(Bundle stream, List<UInt64> v)
				{
					stream.writeUint32((UInt32)v.Count);
					for(int i=0; i<v.Count; ++i)
					{
						stream.writeUint64(v[i]);
					};
				}
			}

			public CARD_GROUP createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				CARD_GROUP datas = new CARD_GROUP();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, CARD_GROUP v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public CARD_GROUP createFromStreamEx(MemoryStream stream)
		{
			return itemType.createFromStreamEx(stream);
		}

		public void addToStreamEx(Bundle stream, CARD_GROUP v)
		{
			itemType.addToStreamEx(stream, v);
		}
	}



	public class DATATYPE_CARD_GROUP_IN : DATATYPE_BASE
	{
		public CARD_GROUP_IN createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			CARD_GROUP_IN datas = new CARD_GROUP_IN();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, CARD_GROUP_IN v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	}



	public class DATATYPE_ENTITY_ID_LIST : DATATYPE_BASE
	{
		public ENTITY_ID_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITY_ID_LIST datas = new ENTITY_ID_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITY_ID_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AVATAR_CARDLIST : DATATYPE_BASE
	{
		public AVATAR_CARDLIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			AVATAR_CARDLIST datas = new AVATAR_CARDLIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_CARDLIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	}



	public class DATATYPE_ENTITY_LIST : DATATYPE_BASE
	{
		public ENTITY_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITY_LIST datas = new ENTITY_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readEntitycall());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITY_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeEntitycall(v[i]);
			};
		}
	}



	public class DATATYPE_ACCOUNT_DATA : DATATYPE_BASE
	{
		public ACCOUNT_DATA createFromStreamEx(MemoryStream stream)
		{
			ACCOUNT_DATA datas = new ACCOUNT_DATA();
			datas.money = stream.readUint64();
			datas.diamond = stream.readUint64();
			datas.kglod = stream.readUint64();
			datas.eglod = stream.readUint64();
			datas.name = stream.readUnicode();
			datas.gender = stream.readUint8();
			datas.Icon = stream.readUint32();
			datas.FirstLogin = stream.readUint8();
			datas.FirstRecharge = stream.readUint8();
			datas.rank = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, ACCOUNT_DATA v)
		{
			stream.writeUint64(v.money);
			stream.writeUint64(v.diamond);
			stream.writeUint64(v.kglod);
			stream.writeUint64(v.eglod);
			stream.writeUnicode(v.name);
			stream.writeUint8(v.gender);
			stream.writeUint32(v.Icon);
			stream.writeUint8(v.FirstLogin);
			stream.writeUint8(v.FirstRecharge);
			stream.writeUint64(v.rank);
		}
	}



	public class DATATYPE_STEAL_LIST : DATATYPE_BASE
	{
		public STEAL_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			STEAL_LIST datas = new STEAL_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, STEAL_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	}



	public class DATATYPE_LAND_INFO : DATATYPE_BASE
	{
		private DATATYPE_STEAL_LIST StealList_DataType = new DATATYPE_STEAL_LIST();

		public LAND_INFO createFromStreamEx(MemoryStream stream)
		{
			LAND_INFO datas = new LAND_INFO();
			datas.ID = stream.readUint32();
			datas.LandType = stream.readUint32();
			datas.ItemType = stream.readUint32();
			datas.UseNum = stream.readUint32();
			datas.stage = stream.readUint32();
			datas.EndTime = stream.readUint32();
			datas.surpHarvest = stream.readUint32();
			datas.Harvest = stream.readUint32();
			datas.StealList = StealList_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, LAND_INFO v)
		{
			stream.writeUint32(v.ID);
			stream.writeUint32(v.LandType);
			stream.writeUint32(v.ItemType);
			stream.writeUint32(v.UseNum);
			stream.writeUint32(v.stage);
			stream.writeUint32(v.EndTime);
			stream.writeUint32(v.surpHarvest);
			stream.writeUint32(v.Harvest);
			StealList_DataType.addToStreamEx(stream, v.StealList);
		}
	}



	public class DATATYPE_LAND_LIST : DATATYPE_BASE
	{
		private DATATYPE_LAND_INFO itemType = new DATATYPE_LAND_INFO();

		public LAND_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			LAND_LIST datas = new LAND_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, LAND_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_GJ_INFO : DATATYPE_BASE
	{
		public GJ_INFO createFromStreamEx(MemoryStream stream)
		{
			GJ_INFO datas = new GJ_INFO();
			datas.GJType = stream.readUint32();
			datas.GJEndtime = stream.readUint64();
			datas.GJGetEndtime = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, GJ_INFO v)
		{
			stream.writeUint32(v.GJType);
			stream.writeUint64(v.GJEndtime);
			stream.writeUint64(v.GJGetEndtime);
		}
	}



	public class DATATYPE_FRIEND_INFO : DATATYPE_BASE
	{
		public FRIEND_INFO createFromStreamEx(MemoryStream stream)
		{
			FRIEND_INFO datas = new FRIEND_INFO();
			datas.uid = stream.readUnicode();
			datas.online = stream.readUint8();
			datas.DBID = stream.readUint64();
			datas.Name = stream.readUnicode();
			datas.Icon = stream.readUint32();
			datas.gender = stream.readUint8();
			datas.CanSteal = stream.readUint8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, FRIEND_INFO v)
		{
			stream.writeUnicode(v.uid);
			stream.writeUint8(v.online);
			stream.writeUint64(v.DBID);
			stream.writeUnicode(v.Name);
			stream.writeUint32(v.Icon);
			stream.writeUint8(v.gender);
			stream.writeUint8(v.CanSteal);
		}
	}



	public class DATATYPE_APPLY_INFO : DATATYPE_BASE
	{
		public APPLY_INFO createFromStreamEx(MemoryStream stream)
		{
			APPLY_INFO datas = new APPLY_INFO();
			datas.DBID = stream.readUint64();
			datas.IsYao = stream.readUint8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, APPLY_INFO v)
		{
			stream.writeUint64(v.DBID);
			stream.writeUint8(v.IsYao);
		}
	}



	public class DATATYPE_ACCEPT_INFO : DATATYPE_BASE
	{
		public ACCEPT_INFO createFromStreamEx(MemoryStream stream)
		{
			ACCEPT_INFO datas = new ACCEPT_INFO();
			datas.DBID = stream.readUint64();
			datas.YaoEndTime = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, ACCEPT_INFO v)
		{
			stream.writeUint64(v.DBID);
			stream.writeUint64(v.YaoEndTime);
		}
	}



	public class DATATYPE_STEAL_INFO : DATATYPE_BASE
	{
		public STEAL_INFO createFromStreamEx(MemoryStream stream)
		{
			STEAL_INFO datas = new STEAL_INFO();
			datas.LandID = stream.readUint32();
			datas.StealValue = stream.readUint32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, STEAL_INFO v)
		{
			stream.writeUint32(v.LandID);
			stream.writeUint32(v.StealValue);
		}
	}



	public class DATATYPE_CAN_STEAL_INFO : DATATYPE_BASE
	{
		public CAN_STEAL_INFO createFromStreamEx(MemoryStream stream)
		{
			CAN_STEAL_INFO datas = new CAN_STEAL_INFO();
			datas.DBID = stream.readUint64();
			datas.CanSteal = stream.readUint8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, CAN_STEAL_INFO v)
		{
			stream.writeUint64(v.DBID);
			stream.writeUint8(v.CanSteal);
		}
	}



	public class DATATYPE_ITEM_INFO : DATATYPE_BASE
	{
		public ITEM_INFO createFromStreamEx(MemoryStream stream)
		{
			ITEM_INFO datas = new ITEM_INFO();
			datas.ItemType = stream.readInt32();
			datas.ItemNum = stream.readUint32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, ITEM_INFO v)
		{
			stream.writeInt32(v.ItemType);
			stream.writeUint32(v.ItemNum);
		}
	}



	public class DATATYPE_SYS_MESSAGE : DATATYPE_BASE
	{
		private DATATYPE__SYS_MESSAGE_ArgList_ArrayType_ChildArray ArgList_DataType = new DATATYPE__SYS_MESSAGE_ArgList_ArrayType_ChildArray();

		public class DATATYPE__SYS_MESSAGE_ArgList_ArrayType_ChildArray : DATATYPE_BASE
		{
			public List<string> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<string> datas = new List<string>();

				while(size > 0)
				{
					--size;
					datas.Add(stream.readUnicode());
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<string> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					stream.writeUnicode(v[i]);
				};
			}
		}

		public SYS_MESSAGE createFromStreamEx(MemoryStream stream)
		{
			SYS_MESSAGE datas = new SYS_MESSAGE();
			datas.MesaageUUID = stream.readUint64();
			datas.time = stream.readUint64();
			datas.MesaageID = stream.readUint32();
			datas.ArgList = ArgList_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, SYS_MESSAGE v)
		{
			stream.writeUint64(v.MesaageUUID);
			stream.writeUint64(v.time);
			stream.writeUint32(v.MesaageID);
			ArgList_DataType.addToStreamEx(stream, v.ArgList);
		}
	}



	public class DATATYPE_PET_MAP_CONFIG_INFO : DATATYPE_BASE
	{
		public PET_MAP_CONFIG_INFO createFromStreamEx(MemoryStream stream)
		{
			PET_MAP_CONFIG_INFO datas = new PET_MAP_CONFIG_INFO();
			datas.cityName = stream.readUnicode();
			datas.position = stream.readUnicode();
			datas.location = stream.readUnicode();
			datas.radius = stream.readUnicode();
			datas.Scycle = stream.readUnicode();
			datas.Ecycle = stream.readUnicode();
			datas.Stime = stream.readUnicode();
			datas.Etime = stream.readUnicode();
			datas.frequence = stream.readUnicode();
			datas.gen_min = stream.readUnicode();
			datas.gen_max = stream.readUnicode();
			datas.gen_id = stream.readUnicode();
			datas.spe_min = stream.readUnicode();
			datas.spe_max = stream.readUnicode();
			datas.spe_id = stream.readUnicode();
			datas.spe_prob = stream.readUnicode();
			datas.spe_prob_list = stream.readUnicode();
			datas.enable = stream.readUnicode();
			return datas;
		}

		public void addToStreamEx(Bundle stream, PET_MAP_CONFIG_INFO v)
		{
			stream.writeUnicode(v.cityName);
			stream.writeUnicode(v.position);
			stream.writeUnicode(v.location);
			stream.writeUnicode(v.radius);
			stream.writeUnicode(v.Scycle);
			stream.writeUnicode(v.Ecycle);
			stream.writeUnicode(v.Stime);
			stream.writeUnicode(v.Etime);
			stream.writeUnicode(v.frequence);
			stream.writeUnicode(v.gen_min);
			stream.writeUnicode(v.gen_max);
			stream.writeUnicode(v.gen_id);
			stream.writeUnicode(v.spe_min);
			stream.writeUnicode(v.spe_max);
			stream.writeUnicode(v.spe_id);
			stream.writeUnicode(v.spe_prob);
			stream.writeUnicode(v.spe_prob_list);
			stream.writeUnicode(v.enable);
		}
	}



	public class DATATYPE_PET_MAP_XYZ : DATATYPE_BASE
	{
		public PET_MAP_XYZ createFromStreamEx(MemoryStream stream)
		{
			PET_MAP_XYZ datas = new PET_MAP_XYZ();
			datas.PetType = stream.readUint32();
			datas.PetNum = stream.readUint32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, PET_MAP_XYZ v)
		{
			stream.writeUint32(v.PetType);
			stream.writeUint32(v.PetNum);
		}
	}



	public class DATATYPE_PET_MAP_INFO : DATATYPE_BASE
	{
		private DATATYPE__PET_MAP_INFO_PetXYZList_ArrayType_ChildArray PetXYZList_DataType = new DATATYPE__PET_MAP_INFO_PetXYZList_ArrayType_ChildArray();

		public class DATATYPE__PET_MAP_INFO_PetXYZList_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_PET_MAP_XYZ itemType = new DATATYPE_PET_MAP_XYZ();

			public List<PET_MAP_XYZ> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<PET_MAP_XYZ> datas = new List<PET_MAP_XYZ>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<PET_MAP_XYZ> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public PET_MAP_INFO createFromStreamEx(MemoryStream stream)
		{
			PET_MAP_INFO datas = new PET_MAP_INFO();
			datas.cityName = stream.readUnicode();
			datas.position = stream.readUnicode();
			datas.radius = stream.readUint32();
			datas.refreshEndTime = stream.readUint64();
			datas.PetXYZList = PetXYZList_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, PET_MAP_INFO v)
		{
			stream.writeUnicode(v.cityName);
			stream.writeUnicode(v.position);
			stream.writeUint32(v.radius);
			stream.writeUint64(v.refreshEndTime);
			PetXYZList_DataType.addToStreamEx(stream, v.PetXYZList);
		}
	}



	public class DATATYPE_PET_SELF_INFO : DATATYPE_BASE
	{
		private DATATYPE__PET_SELF_INFO_PetXYZList_ArrayType_ChildArray PetXYZList_DataType = new DATATYPE__PET_SELF_INFO_PetXYZList_ArrayType_ChildArray();

		public class DATATYPE__PET_SELF_INFO_PetXYZList_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_PET_MAP_XYZ itemType = new DATATYPE_PET_MAP_XYZ();

			public List<PET_MAP_XYZ> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<PET_MAP_XYZ> datas = new List<PET_MAP_XYZ>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<PET_MAP_XYZ> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public PET_SELF_INFO createFromStreamEx(MemoryStream stream)
		{
			PET_SELF_INFO datas = new PET_SELF_INFO();
			datas.radius = stream.readUint32();
			datas.refreshEndTime = stream.readUint64();
			datas.PetXYZList = PetXYZList_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, PET_SELF_INFO v)
		{
			stream.writeUint32(v.radius);
			stream.writeUint64(v.refreshEndTime);
			PetXYZList_DataType.addToStreamEx(stream, v.PetXYZList);
		}
	}



	public class DATATYPE_PET_INFO : DATATYPE_BASE
	{
		public PET_INFO createFromStreamEx(MemoryStream stream)
		{
			PET_INFO datas = new PET_INFO();
			datas.UUID = stream.readUint64();
			datas.PetType = stream.readUint32();
			datas.Endtime = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, PET_INFO v)
		{
			stream.writeUint64(v.UUID);
			stream.writeUint32(v.PetType);
			stream.writeUint64(v.Endtime);
		}
	}



	public class DATATYPE_TASK_INFO : DATATYPE_BASE
	{
		public TASK_INFO createFromStreamEx(MemoryStream stream)
		{
			TASK_INFO datas = new TASK_INFO();
			datas.TaskType = stream.readUint32();
			datas.FinishNum = stream.readUint32();
			datas.CanAward = stream.readUint32();
			datas.Endtime = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, TASK_INFO v)
		{
			stream.writeUint32(v.TaskType);
			stream.writeUint32(v.FinishNum);
			stream.writeUint32(v.CanAward);
			stream.writeUint64(v.Endtime);
		}
	}



	public class DATATYPE_CARD_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE__CARD_INFOS_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__CARD_INFOS_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__CARD_INFOS_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			public List<UInt64> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<UInt64> datas = new List<UInt64>();

				while(size > 0)
				{
					--size;
					datas.Add(stream.readUint64());
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<UInt64> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					stream.writeUint64(v[i]);
				};
			}
		}

		public CARD_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			CARD_INFOS_LIST datas = new CARD_INFOS_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, CARD_INFOS_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_OPEN_PACK_DATA : DATATYPE_BASE
	{
		public OPEN_PACK_DATA createFromStreamEx(MemoryStream stream)
		{
			OPEN_PACK_DATA datas = new OPEN_PACK_DATA();
			datas.card1 = stream.readUint64();
			datas.card2 = stream.readUint64();
			datas.card3 = stream.readUint64();
			datas.card4 = stream.readUint64();
			datas.card5 = stream.readUint64();
			return datas;
		}

		public void addToStreamEx(Bundle stream, OPEN_PACK_DATA v)
		{
			stream.writeUint64(v.card1);
			stream.writeUint64(v.card2);
			stream.writeUint64(v.card3);
			stream.writeUint64(v.card4);
			stream.writeUint64(v.card5);
		}
	}



	public class DATATYPE_OPEN_PACK_NAME_DATA : DATATYPE_BASE
	{
		public OPEN_PACK_NAME_DATA createFromStreamEx(MemoryStream stream)
		{
			OPEN_PACK_NAME_DATA datas = new OPEN_PACK_NAME_DATA();
			datas.card1 = stream.readUnicode();
			datas.card2 = stream.readUnicode();
			datas.card3 = stream.readUnicode();
			datas.card4 = stream.readUnicode();
			datas.card5 = stream.readUnicode();
			return datas;
		}

		public void addToStreamEx(Bundle stream, OPEN_PACK_NAME_DATA v)
		{
			stream.writeUnicode(v.card1);
			stream.writeUnicode(v.card2);
			stream.writeUnicode(v.card3);
			stream.writeUnicode(v.card4);
			stream.writeUnicode(v.card5);
		}
	}



	public class DATATYPE_AVATAR_INFOS : DATATYPE_BASE
	{
		private DATATYPE_AVATAR_CARDLIST cardList_DataType = new DATATYPE_AVATAR_CARDLIST();

		public AVATAR_INFOS createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFOS datas = new AVATAR_INFOS();
			datas.name = stream.readUnicode();
			datas.roleType = stream.readUint8();
			datas.cardList = cardList_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS v)
		{
			stream.writeUnicode(v.name);
			stream.writeUint8(v.roleType);
			cardList_DataType.addToStreamEx(stream, v.cardList);
		}
	}



	public class DATATYPE_STR_LIST : DATATYPE_BASE
	{
		public STR_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			STR_LIST datas = new STR_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUnicode());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, STR_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUnicode(v[i]);
			};
		}
	}



	public class DATATYPE_AVATAR_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE_AVATAR_INFOS itemType = new DATATYPE_AVATAR_INFOS();

		public AVATAR_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			AVATAR_INFOS_LIST datas = new AVATAR_INFOS_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_LLSTRING : DATATYPE_BASE
	{
		private DATATYPE_LLSTRING_ChildArray itemType = new DATATYPE_LLSTRING_ChildArray();

		public class DATATYPE_LLSTRING_ChildArray : DATATYPE_BASE
		{
			private DATATYPE__LLSTRING_ArrayType_ChildArray itemType = new DATATYPE__LLSTRING_ArrayType_ChildArray();

			public class DATATYPE__LLSTRING_ArrayType_ChildArray : DATATYPE_BASE
			{
				public List<string> createFromStreamEx(MemoryStream stream)
				{
					UInt32 size = stream.readUint32();
					List<string> datas = new List<string>();

					while(size > 0)
					{
						--size;
						datas.Add(stream.readString());
					};

					return datas;
				}

				public void addToStreamEx(Bundle stream, List<string> v)
				{
					stream.writeUint32((UInt32)v.Count);
					for(int i=0; i<v.Count; ++i)
					{
						stream.writeString(v[i]);
					};
				}
			}

			public LLSTRING createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				LLSTRING datas = new LLSTRING();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, LLSTRING v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public LLSTRING createFromStreamEx(MemoryStream stream)
		{
			return itemType.createFromStreamEx(stream);
		}

		public void addToStreamEx(Bundle stream, LLSTRING v)
		{
			itemType.addToStreamEx(stream, v);
		}
	}



	public class DATATYPE_OnlinePlayerData : DATATYPE_BASE
	{
		public OnlinePlayerData createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			OnlinePlayerData datas = new OnlinePlayerData();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readEntitycall());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, OnlinePlayerData v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeEntitycall(v[i]);
			};
		}
	}



	public class DATATYPE_CARD_DATA : DATATYPE_BASE
	{
		private DATATYPE__CARD_DATA_value_ArrayType_ChildArray value_DataType = new DATATYPE__CARD_DATA_value_ArrayType_ChildArray();

		public class DATATYPE__CARD_DATA_value_ArrayType_ChildArray : DATATYPE_BASE
		{
			public List<UInt64> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<UInt64> datas = new List<UInt64>();

				while(size > 0)
				{
					--size;
					datas.Add(stream.readUint64());
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<UInt64> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					stream.writeUint64(v[i]);
				};
			}
		}

		public CARD_DATA createFromStreamEx(MemoryStream stream)
		{
			CARD_DATA datas = new CARD_DATA();
			datas.value = value_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, CARD_DATA v)
		{
			value_DataType.addToStreamEx(stream, v.value);
		}
	}



	public class DATATYPE_AnonymousArray_61 : DATATYPE_BASE
	{
		private DATATYPE_ITEM_INFO itemType = new DATATYPE_ITEM_INFO();

		public List<ITEM_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<ITEM_INFO> datas = new List<ITEM_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<ITEM_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_62 : DATATYPE_BASE
	{
		private DATATYPE_ITEM_INFO itemType = new DATATYPE_ITEM_INFO();

		public List<ITEM_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<ITEM_INFO> datas = new List<ITEM_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<ITEM_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_65 : DATATYPE_BASE
	{
		private DATATYPE_FRIEND_INFO itemType = new DATATYPE_FRIEND_INFO();

		public List<FRIEND_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<FRIEND_INFO> datas = new List<FRIEND_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<FRIEND_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_66 : DATATYPE_BASE
	{
		private DATATYPE_APPLY_INFO itemType = new DATATYPE_APPLY_INFO();

		public List<APPLY_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<APPLY_INFO> datas = new List<APPLY_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<APPLY_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_67 : DATATYPE_BASE
	{
		private DATATYPE_ACCEPT_INFO itemType = new DATATYPE_ACCEPT_INFO();

		public List<ACCEPT_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<ACCEPT_INFO> datas = new List<ACCEPT_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<ACCEPT_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_68 : DATATYPE_BASE
	{
		private DATATYPE_SYS_MESSAGE itemType = new DATATYPE_SYS_MESSAGE();

		public List<SYS_MESSAGE> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<SYS_MESSAGE> datas = new List<SYS_MESSAGE>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<SYS_MESSAGE> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_69 : DATATYPE_BASE
	{
		public List<UInt64> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<UInt64> datas = new List<UInt64>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<UInt64> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_70 : DATATYPE_BASE
	{
		private DATATYPE_FRIEND_INFO itemType = new DATATYPE_FRIEND_INFO();

		public List<FRIEND_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<FRIEND_INFO> datas = new List<FRIEND_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<FRIEND_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_71 : DATATYPE_BASE
	{
		private DATATYPE_APPLY_INFO itemType = new DATATYPE_APPLY_INFO();

		public List<APPLY_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<APPLY_INFO> datas = new List<APPLY_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<APPLY_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_72 : DATATYPE_BASE
	{
		private DATATYPE_ACCEPT_INFO itemType = new DATATYPE_ACCEPT_INFO();

		public List<ACCEPT_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<ACCEPT_INFO> datas = new List<ACCEPT_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<ACCEPT_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_73 : DATATYPE_BASE
	{
		private DATATYPE_SYS_MESSAGE itemType = new DATATYPE_SYS_MESSAGE();

		public List<SYS_MESSAGE> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<SYS_MESSAGE> datas = new List<SYS_MESSAGE>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<SYS_MESSAGE> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_74 : DATATYPE_BASE
	{
		private DATATYPE_STEAL_INFO itemType = new DATATYPE_STEAL_INFO();

		public List<STEAL_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<STEAL_INFO> datas = new List<STEAL_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<STEAL_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_75 : DATATYPE_BASE
	{
		private DATATYPE_CAN_STEAL_INFO itemType = new DATATYPE_CAN_STEAL_INFO();

		public List<CAN_STEAL_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<CAN_STEAL_INFO> datas = new List<CAN_STEAL_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<CAN_STEAL_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_77 : DATATYPE_BASE
	{
		private DATATYPE_PET_INFO itemType = new DATATYPE_PET_INFO();

		public List<PET_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<PET_INFO> datas = new List<PET_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<PET_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_78 : DATATYPE_BASE
	{
		private DATATYPE_PET_MAP_INFO itemType = new DATATYPE_PET_MAP_INFO();

		public List<PET_MAP_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<PET_MAP_INFO> datas = new List<PET_MAP_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<PET_MAP_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_79 : DATATYPE_BASE
	{
		private DATATYPE_PET_INFO itemType = new DATATYPE_PET_INFO();

		public List<PET_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<PET_INFO> datas = new List<PET_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<PET_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_81 : DATATYPE_BASE
	{
		private DATATYPE_TASK_INFO itemType = new DATATYPE_TASK_INFO();

		public List<TASK_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<TASK_INFO> datas = new List<TASK_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<TASK_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_82 : DATATYPE_BASE
	{
		private DATATYPE_TASK_INFO itemType = new DATATYPE_TASK_INFO();

		public List<TASK_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<TASK_INFO> datas = new List<TASK_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<TASK_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_84 : DATATYPE_BASE
	{
		private DATATYPE_PET_MAP_CONFIG_INFO itemType = new DATATYPE_PET_MAP_CONFIG_INFO();

		public List<PET_MAP_CONFIG_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<PET_MAP_CONFIG_INFO> datas = new List<PET_MAP_CONFIG_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<PET_MAP_CONFIG_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_85 : DATATYPE_BASE
	{
		private DATATYPE_PET_MAP_INFO itemType = new DATATYPE_PET_MAP_INFO();

		public List<PET_MAP_INFO> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<PET_MAP_INFO> datas = new List<PET_MAP_INFO>();

			while(size > 0)
			{
				--size;
				datas.Add(itemType.createFromStreamEx(stream));
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<PET_MAP_INFO> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	}


}